
#include <ESP8266WiFi.h>

#include <WiFiClient.h>

#define relay D5

const char* ssid = "ORANGE_C5E";
const char* password = "pht/_RVHK717600";


// TCP server at port 80 will respond to HTTP requests
WiFiServer server(80);

void setup(void) {
  Serial.begin(115200);
  pinMode(relay,OUTPUT);
  // Connect to WiFi network
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

 

  // Start TCP (HTTP) server
  server.begin();
  Serial.println("TCP server started");


}

void loop(void) {


  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  Serial.println("");
  Serial.println("New client");

  // Wait for data from client to become available
  while (client.connected() && !client.available()) {
    delay(1);
  }

  // Read the first line of HTTP request
  String req = client.readStringUntil('\r');

  // First line of HTTP request looks like "GET /path HTTP/1.1"
  // Retrieve the "/path" part by finding the spaces
   Serial.println(req);
  int addr_start = req.indexOf(' ');
 
   Serial.println(addr_start);
  int addr_end = req.indexOf( ' ',addr_start+1 );
 Serial.println(addr_end);
  if (addr_start == -1 || addr_end == -1) {
    Serial.print("Invalid request: ");
    Serial.println(req);
    return;
  }
  req = req.substring(addr_start + 1, addr_end);
  
  Serial.print("Request: ");
  Serial.println(req);
  client.flush();

  String s;
  if (req == "/" || req == "/on") {
   
    s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html><body><button><a href=\"/on\">Switch</button></body> ";
 
    s += "</html>\r\n\r\n";
    Serial.println("Sending 200");
  } else {
    s = "HTTP/1.1 404 Not Found\r\n\r\n";
    Serial.println("Sending 404");
  }
   if (req == "/on") {
  digitalWrite(relay,!digitalRead(relay));
 
  }
  client.print(s);

  Serial.println("Done with client");
}
